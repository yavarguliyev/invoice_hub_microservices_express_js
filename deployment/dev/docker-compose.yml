version: "3.8"

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - common

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper
    networks:
      - common
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '9100:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - common

  auth-db:
    container_name: auth-db
    image: postgres:18
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=auth_service_db
      - DB_DEFAULT_DATABASE=auth_service_db
      - DB_DEFAULT_HOST=auth-db
      - DB_DEFAULT_PORT=5432
    volumes:
      - auth-postgres_data:/var/lib/postgresql/18/auth
    ports:
      - '54321:5432'
    networks:
      - common
  
  invoice-db:
    container_name: invoice-db
    image: postgres:18
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=invoice_service_db
      - DB_DEFAULT_DATABASE=invoice_service_db
      - DB_DEFAULT_HOST=invoice-db
      - DB_DEFAULT_PORT=54322
    volumes:
      - invoice-postgres_data:/var/lib/postgresql/18/invoice
    ports:
      - '54322:5432'
    networks:
      - common
    
  order-db:
    container_name: order-db
    image: postgres:18
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=order_service_db
      - DB_DEFAULT_DATABASE=order_service_db
      - DB_DEFAULT_HOST=order-db
      - DB_DEFAULT_PORT=54323
    volumes:
      - order-postgres_data:/var/lib/postgresql/18/order
    ports:
      - '54323:5432'
    networks:
      - common

  redis_auth:
    container_name: redis_auth_container
    image: redis
    ports:
      - '6381:6379'
    command: ['redis-server', '--requirepass', 'your_redis_password']
    restart: always
    volumes:
      - redis_auth_data:/data
    networks:
      - common
  
  redis_invoice:
    container_name: redis_invoice_container
    image: redis
    ports:
      - '6382:6379'
    command: ['redis-server', '--requirepass', 'your_redis_password']
    restart: always
    volumes:
      - redis_invoice_data:/data
    networks:
      - common

  redis_order:
    container_name: redis_order_container
    image: redis
    ports:
      - '6383:6379'
    command: ['redis-server', '--requirepass', 'your_redis_password']
    restart: always
    volumes:
      - redis_order_data:/data
    networks:
      - common

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - common

  grafana:
    container_name: grafana
    image: grafana/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    ports:
      - '3001:3000'
    depends_on:
      - order-service
      - invoice-service
      - auth-service
      - api-gateway
      - prometheus
    networks:
      - common
    volumes:
      - grafana-data:/var/lib/grafana

  api-gateway:
    container_name: api-gateway
    image: invoice_hub_microservices_api-gateway
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 3000
        SERVICE_NAME: api-gateway
        ENV_PATH: ./deployment/dev/.env
    environment:
      - PORT=3000
    ports:
      - '3000:3000'
    networks:
      - common
    volumes:
      - ../../common:/app/common
      - ../../api-gateway/src:/app/api-gateway/src:delegated
    depends_on:
      - auth-db
      - invoice-db
      - order-db
      - kafka
      - order-service
      - invoice-service
      - auth-service
    command: sh -c "yarn start"
  
  auth-service:
    container_name: auth-service
    image: invoice_hub_microservices_auth-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4001
        SERVICE_NAME: services/auth-service
        ENV_PATH: ./deployment/dev/.env
    environment:
      - PORT=4001
      - POSTGRES_DB=auth_service_db
      - DB_DEFAULT_DATABASE=auth_service_db
      - DB_DEFAULT_HOST=auth-db
      - DB_DEFAULT_PORT=5432
      - REDIS_HOST=redis_auth_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_redis_password
      - REDIS_URL=redis://redis_auth_container:6379
      - REDIS_DEFAULT_CACHE_TTL=3600
    ports:
      - '4001:4001'
    networks:
      - common
    volumes:
      - ../../common:/app/common
      - ../../services/auth-service/src:/app/services/auth-service/src:delegated
      - ../../services/auth-service/migrations:/app/services/auth-service/migrations:delegated
    depends_on:
      - auth-db
      - redis_auth
      - kafka
      - order-service
      - invoice-service
    command: sh -c "yarn mup && yarn start"

  invoice-service:
    container_name: invoice-service
    image: invoice_hub_microservices_invoice-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4002
        SERVICE_NAME: services/invoice-service
        ENV_PATH: ./deployment/dev/.env
    environment:
      - PORT=4002
      - POSTGRES_DB=invoice_service_db
      - DB_DEFAULT_DATABASE=invoice_service_db
      - DB_DEFAULT_HOST=invoice-db
      - DB_DEFAULT_PORT=5432
      - REDIS_HOST=redis_invoice_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_redis_password
      - REDIS_URL=redis://redis_invoice_container:6379
      - REDIS_DEFAULT_CACHE_TTL=3600
    ports:
      - '4002:4002'
    networks:
      - common
    volumes:
      - ../../common:/app/common
      - ../../services/invoice-service/src:/app/services/invoice-service/src:delegated
      - ../../services/invoice-service/migrations:/app/services/invoice-service/migrations:delegated
    depends_on:
      - invoice-db
      - redis_invoice
      - kafka
      - order-service
    command: sh -c "yarn mup && yarn start"
  
  order-service:
    container_name: order-service
    image: invoice_hub_microservices_order-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4003
        SERVICE_NAME: services/order-service
        ENV_PATH: ./deployment/dev/.env
    environment:
      - PORT=4003
      - POSTGRES_DB=order_service_db
      - DB_DEFAULT_DATABASE=order_service_db
      - DB_DEFAULT_HOST=order-db
      - DB_DEFAULT_PORT=5432
      - REDIS_HOST=redis_order_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_redis_password
      - REDIS_URL=redis://redis_order_container:6379
      - REDIS_DEFAULT_CACHE_TTL=3600
    ports:
      - '4003:4003'
    networks:
      - common
    volumes:
      - ../../common:/app/common
      - ../../services/order-service/src:/app/services/order-service/src:delegated
      - ../../services/order-service/migrations:/app/services/order-service/migrations:delegated
    depends_on:
      - order-db
      - redis_order
      - kafka
    command: sh -c "yarn mup && yarn start"

networks:
  common:
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
  auth-postgres_data:
  invoice-postgres_data:
  order-postgres_data:
  grafana-data:
  redis_auth_data:
  redis_invoice_data:
  redis_order_data:
  prometheus-data:
